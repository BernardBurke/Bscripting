#!/bin/bash
#	-------------------------------------------------------------------
#
#	Shell program to implement standardised function includes for the ITS environment
#
#	Copyright 2009, Ben Burke,Sydney Australia,Infrastructure Manager - the Virtualco, ben.burke@internode.on.net.
#
#	This program is free software; you can redistribute it and/or
#	modify it under the terms of the GNU General Public License as
#	published by the Free Software Foundation; either version 2 of the
#	License, or (at your option) any later version. 
#
#	This program is distributed in the hope that it will be useful, but
#	WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#	General Public License for more details.
#
#	Description:
#
#	This script only contains functions. They each should have their own descriptions.
#
#	All scripts in the ITS environment should include this file and then call initialise before doing their thing.
#
#	Revision History:	Who		What was changed?
#	-----------------------------------------------------------------------------------------------------------------------
#	4-Jan-2010		Ben Burke	Created initial version, attempting to get standard script initialisation right
#
#
#
#
#
#	-------------------------------------------------------------------
#	Functions
#	-------------------------------------------------------------------

function initialise
{
#
#	Standard Initialisation part of script
#
#	We need the ability to log/view script output based on a variable. 
#	This probably needs extending with a set of values and a case 
#	statement.



	if [ "$DEBUG" = "true" ]; then
		set -xv
	fi

#	Initially, all ITSx environment variables are based on ITSROOT, which does have a default value


	if [ "$ITSROOT" = "" ]; then
		export ITSROOT="/its"
	fi

#	now, include the required environment variables from $ITSROOT/env/env.sh
	if [ -f "$ITSROOT/env/env.sh" ];then
		source $ITSROOT/env/env.sh
	else
		echo "No env.sh found in $ITSROOT/env - cannot continue. Exiting"
		exit 1
	fi
	
#
#	Define a few constants for the whole environment

	PROGNAME=$(basename $0)
	COMMON_FUNCTIONS_LIBRARY_VERSION="1.0.1"

#	-------------------------------------------------------------------


#	If we are running as a cron job, switch stdout and stderr to a standard logfile
#	Thank you Mr Garrett for the basic idea;-)
# 	Did have to ammend this slightly - parent process becomes 'flock' or 'cron' since using flock
#	to syncronise some cron jobs

	ppid=$( ps -oppid -p$$ | grep -v PPID )
	parent_name=$(ps -ocomm -p$ppid | grep -v COMM)

	if [ "$parent_name" = "flock" ] || [ "$parent_name" = "cron" ];then
		logfile=$ITSL/$PROGNAME.log
		echo "Running as a cron job - switching to standard log - $logfile" 
		exec >> $logfile 2>&1
	else
		logfile="stdout"
	fi


	generate_event -f $PROGNAME -s i -m  "Initialise complete for $PROGNAME - logging to $logfile"


# 	create some aliases for generate_event - just for tidy code and less typing

	
	gen_info="generate_event -f $PROGNAME -s i -m"
	gen_success="generate_event -f $PROGNAME -s s -m"
	gen_warning="generate_event -f $PROGNAME -s w -m"
	gen_error="generate_event -f $PROGNAME -s e -m"
	gen_fatal="generate_event -f $PROGNAME -s f -m"
	

# Set file creation mask so that all files are created with 600 permissions.

	umask 066


# Trap TERM, HUP, and INT signals and properly exit

	trap "signal_exit TERM" TERM HUP
	trap "signal_exit INT"  INT
	trap "error_exit ERR" ERR

# Create temporary file(s)

	make_temp_files


}


function root_check
{
	#####
	#	Function to check if user is root
	#	No arguments
	#####

	if [ "$(id | sed 's/uid=\([0-9]*\).*/\1/')" != "0" ]; then
		generate_event -f "$PROGNAME" -s f -m "You must be the superuser to run this script."
		exit 1
	fi
}

# Future plans include situations that will have a temporary mount point unmounted from more than one place -
# Separated this function out for that purpose.

function unmount_temp_mount
{
	# with no arguements, do nothing
	if [ "$1" = "" ]; then
		return
	fi	

	# if not back from the current directory during the call, go back there now
	if [ "$(pwd)" = "$1" ]; then
		cd $ORIGINAL_DIR
	fi

	# if we've been handed a directory...
	if [ -d $1 ]; then

		# validate that it's a real mount point
		mountpoint -q $1

		# if so, unmount it
		if [ $? = 0 ]; then 
			umount $1
			if [ $? = 0  ]; then
				$gen_info "Successfully unmounted $1"
			else
				$gen_error "Failed to unmount $1"
			fi
		fi
		
		# and remove the temporary directory
		rmdir $1
	fi

}


function clean_up
{

#	-----------------------------------------------------------------------
#	Function to remove temporary files and other housekeeping
#		No arguments
#	-----------------------------------------------------------------------

	rm -f ${TEMP_FILE1}

# those scripts including this function might need a local clean up, called in all relevant cases

	local_clean_up
}


function error_exit
{

#	-----------------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	-----------------------------------------------------------------------


	# this function is a catch all for non-handled errors. 
	# any 'smart' error handling should be done in line

	echo "${PROGNAME}: ${1:-"Unknown Error"}" >&2
	generate_event -f "${PROGNAME}" -s e -m "${PROGNAME}: ${1}:-Unknown Error"
	clean_up
	exit 1
}


function graceful_exit
{

#	-----------------------------------------------------------------------
#	Function called for a graceful exit
#		No arguments
#	-----------------------------------------------------------------------

	clean_up
	$gen_success "Completing graceful exit"
	exit
}


function signal_exit
{

#	-----------------------------------------------------------------------
#	Function to handle termination signals
#		Accepts 1 argument:
#			signal_spec
#	-----------------------------------------------------------------------

	case $1 in
		INT)	echo "$PROGNAME: Program aborted by user" >&2
			clean_up
			exit
			;;
		TERM)	echo "$PROGNAME: Program terminated" >&2
			clean_up
			exit
			;;
		*)	error_exit "$PROGNAME: Terminating on unknown signal"
			;;
	esac
}


function make_temp_files
{

#	-----------------------------------------------------------------------
#	Function to create temporary files
#		No arguments
#	-----------------------------------------------------------------------

	# Use user's local tmp directory if it exists

	if [ -d ~/tmp ]; then
		TEMP_DIR=~/tmp
	else
		TEMP_DIR=/tmp
	fi

	# Temp file for this script, using paranoid method of creation to
	# insure that file name is not predictable.  This is for security to
	# avoid "tmp race" attacks.  If more files are needed, create using
	# the same form.

	TEMP_FILE1=$(mktemp -q "${TEMP_DIR}/${PROGNAME}.$$.XXXXXX")
	if [ "$TEMP_FILE1" = "" ]; then
		error_exit "cannot create temp file!"
	fi
}



