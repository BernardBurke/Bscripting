#!/bin/bash
#	-------------------------------------------------------------------
#
#	Shell program to implement rsync copy of cifs share.
#
#	Copyright 2009, ben.burke@internode.on.net.
#
#	This program is free software; you can redistribute it and/or
#	modify it under the terms of the GNU General Public License as
#	published by the Free Software Foundation; either version 2 of the
#	License, or (at your option) any later version. 
#
#	This program is distributed in the hope that it will be useful, but
#	WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#	General Public License for more details.
#
#	Description:
#
#
#	NOTE: You must be the superuser to run this script.
#
#	Usage:
#
#		rsync_remote [ -h | --help ] [-d DOIT] [-s source_spec] [-o output_spec] [-c credentials_file]
#
#	Options:
#
#		-h, --help	Display this help message and exit.
#		-d  DOIT{'yes'}        DOIT mode - default is just run a check pass
#		-s  source_spec Source Spec
#		-o  output_spec Output share
#		-c  credentials_file filename
#
#
#	Revision History:
#
#	7-Jan-2010	Ben Burke	Created a copy of cifs_rsync and modified for reverse order 
#
#	-------------------------------------------------------------------
#
#
#	If include the common_fuctions_library - if this environment variable doesn't point to a file
#	just give up and exit
#	

if [ -f  "$ITSCOMMONFUNCTIONS" ];then
	
	source $ITSCOMMONFUNCTIONS
else

	echo "ITSCOMMONFUNCTIONS not defined. Exitting"

	exit 1

fi

#	To Do: Perhaps provide a default, then the entire enviroment would require no external environment variables.

#	-------------------------------------------------------------------
#	Constants
#	-------------------------------------------------------------------

#	PROGNAME=$(basename $0)
# 	PROGNAME is now determined in the common_functions_library

	VERSION="1.0.1"

#	-------------------------------------------------------------------
#	To Do: Move source to RCS or SVN, and have that tool generate versions


#
# any script specific clean up - will be called by included function clean_up

function local_clean_up
{

	$gen_info "Local Clean up called"

	unmount_temp_mount $TMPMOUNTPOINT
}


function usage
{

#	-----------------------------------------------------------------------
#	Function to display usage message (does not exit)
#		No arguments
#	-----------------------------------------------------------------------

	echo "Usage: ${PROGNAME} [-h | --help] [-d {really doit?)] [-s source_share] [-o output_spec] [-c credentials_file]"
}


function helptext
{

#	-----------------------------------------------------------------------
#	Function to display help message for program
#		No arguments
#	-----------------------------------------------------------------------

	local tab=$(echo -en "\t\t")

	cat <<- -EOF-

	${PROGNAME} ver. ${VERSION}
	This is a program to implement rsync copy to a cifs share.

	$(usage)

	Options:

	-h, --help	Display this help message and exit.
	-d  DOIT        DOIT mode - default is just run a check pass
	-s  source_spec Source spec
	-o  output_spec Output share
	-c  credentials_file Credentials filename

	NOTE: You must be the superuser to run this script.
	
-EOF-
}



#	-------------------------------------------------------------------
#	Program starts here
#	-------------------------------------------------------------------

##### Initialization And Setup #####

initialise




##### Command Line Processing #####

if [ "$1" = "--help" ]; then
	helptext
	graceful_exit
fi

DOIT=""
CREDENTIALS_FILENAME="$ITSD/rsync_rw_credentials"

while getopts ":hs:o:c:d" opt; do
	case $opt in
		s )	$gen_info "Source Spec $OPTARG" 
			SOURCE_SPEC="$OPTARG"
			;;
		o )	$gen_info "Output Share  $OPTARG"
			OUTPUT_SPEC="$OPTARG"
		 	;;
		c )	if [ "$OPTARG" != "" ]; then
				CREDENTIALS_FILENAME="$ITSD/$OPTARG"
			fi
			$gen_info "Credentials Filename  $OPTARG" 
			;;
		d )     DOIT="-d"
                        $gen_info "DOIT mode selected"
			;;	
		h )	helptext
			graceful_exit ;;
		* )	usage
			clean_up
			exit 1
	esac
done



##### Main Logic #####

# create a temp directory to be the mount point for this execution
TMPMOUNTPOINT=$(mktemp -d -q "$TEMP_DIR/${PROGNAME}.$$.XXXXXX")

# We will want to cd back here when done
ORIGINAL_DIR=$(pwd)



# removing the TRAP for ERR - we need tocheck return status manually for each step here

trap - ERR




	timed_rsync -s $SOURCE_SPEC -o $OUTPUT_SPEC $DOIT
	
	RET_STATUS="${?}"


if [ "$RET_STATUS" != 0 ]; then

	$gen_fatal "Call to timed_rsync failed, status $RET_STATUS"

	clean_up

	exit 1
else

	$gen_info "timed_rsync returned success - happy days"

fi


graceful_exit

